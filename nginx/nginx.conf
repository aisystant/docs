# Configuration for non-root nginx
worker_processes auto;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log;

    # Basic I/O
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    server_tokens off;

    # Compression:
    # - gzip_static always: if file.html.gz exists, serve it for file.html
    # - gunzip on: for clients without gzip, decompress on the fly
    # Do not reference ".gz" in URIs; let nginx do content negotiation.
    gzip on;
    gzip_static always;
    gunzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    include /etc/nginx/conf.d/*.conf;

    server {
        listen 9002;
        server_name _;
        root /usr/share/nginx/html;
        index index.html;

        include /etc/nginx/includes.d/*.conf;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self';" always;

        # Root -> /index.html
        location = / {
            rewrite ^ /index.html last;
        }

        # Trailing slash canonicalization for pages:
        # If /path/page/ is requested and /path/page.html exists, redirect to /path/page
        location ~ ^/(.+)/$ {
            if (-f $document_root/$1.html) {
                return 301 /$1$is_args$args;
            }
            # Otherwise it's a directory: internally serve /path/index.html
            rewrite ^/(.+)/$ /$1/index.html last;
        }

        # No-slash canonicalization for extensionless paths:
        # If /path (no dot, no trailing slash) is requested:
        # - if /path/index.html exists -> redirect to /path/ (directory canonical)
        # - else serve /path.html (page canonical, .gz picked up by gzip_static)
        location ~ ^/(?!.*\.).+$ {
            if (-f $document_root$uri/index.html) {
                return 301 $uri/$is_args$args;
            }
            rewrite ^/(.*)$ /$1.html last;
        }

        # Long cache for static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Shorter cache for HTML (optional)
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }

        # Health check
        location /health {
            access_log off;
            return 200 "OK";
            add_header Content-Type text/plain;
        }

        # Deny hidden files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}